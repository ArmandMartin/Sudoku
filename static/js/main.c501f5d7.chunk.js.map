{"version":3,"sources":["index.js"],"names":["sudoku","require","puzzle","makepuzzle","solution","solvepuzzle","exception","j","length","findException","SudokuSquare","props","id","type","className","maxLength","defaultValue","value","onInput","onChange","SudokuSquareHint","readOnly","Board","i","num","document","getElementById","replace","singleDigitsOnly","e","classname","this","renderSodkuSquare","renderSodkuRow","React","Component","Game","state","history","squares","stepNumber","event","eventID","target","eventVal","slice","calculateWinner","parseInt","setState","concat","step","move","sq","console","log","status","current","winner","moves","map","desc","key","onClick","jumpTo","handleChange","CheatButton","arr1","arr2","ArrayEquals","getElementsByClassName","setAttribute","board","ReactDOM","render"],"mappings":"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","file":"static/js/main.c501f5d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst sudoku = require(\"sudoku\");\r\nvar puzzle = sudoku.makepuzzle();\r\nvar solution = sudoku.solvepuzzle(puzzle);\r\nvar exception = findException();\r\nvar cheatpuzzle = sudoku.solvepuzzle(puzzle);\r\ncheatpuzzle[exception] = null;\r\n\r\nfunction singleDigitsOnly(id) {\r\n    var num = document.getElementById(id);\r\n    var regex = /[^0-9]/;\r\n    num.value = num.value.replace(regex, \"\");\r\n}\r\nfunction SudokuSquare(props) {\r\n    return(\r\n        <input id={props.id} type=\"text\" className=\"square\" maxLength=\"1\" defaultValue={props.value} onInput={props.onInput} onChange={props.onChange}></input>\r\n    )\r\n}\r\nfunction SudokuSquareHint(props) {\r\n    return(\r\n        <input id={props.id} type=\"text\" className=\"hint\" value={props.value} readOnly></input>\r\n    )\r\n}\r\nclass Board extends React.Component {\r\n    \r\n    //Fill With Puzzle:\r\n    renderSodkuSquare(i){\r\n        var num = puzzle[i];\r\n\r\n        if (num == null){\r\n            return(\r\n                <td>\r\n                    <SudokuSquare\r\n                        id={i}\r\n                        defaultValue={\"\"}\r\n                        onInput={() => singleDigitsOnly(i)}\r\n                        onChange={(e) => this.props.onChange(e)}\r\n                    />\r\n                </td>\r\n            );\r\n        } else{\r\n            return(\r\n                <td>\r\n                    <SudokuSquareHint\r\n                        id={i}\r\n                        value={num}\r\n                    />\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n    renderSodkuRow(i){\r\n        var classname =\"SudokuRow-\"+i;\r\n        return(\r\n            <tr className={classname}>\r\n                {this.renderSodkuSquare(0+(9*i))}\r\n                {this.renderSodkuSquare(1+(9*i))}\r\n                {this.renderSodkuSquare(2+(9*i))}\r\n                {this.renderSodkuSquare(3+(9*i))}\r\n                {this.renderSodkuSquare(4+(9*i))}\r\n                {this.renderSodkuSquare(5+(9*i))}\r\n                {this.renderSodkuSquare(6+(9*i))}\r\n                {this.renderSodkuSquare(7+(9*i))}\r\n                {this.renderSodkuSquare(8+(9*i))}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Sudoku\">\r\n                <table>\r\n                <colgroup><col></col><col></col><col></col></colgroup>\r\n                <colgroup><col></col><col></col><col></col></colgroup>\r\n                <colgroup><col></col><col></col><col></col></colgroup>\r\n                    <tbody>\r\n                        {this.renderSodkuRow(0)}\r\n                        {this.renderSodkuRow(1)}\r\n                        {this.renderSodkuRow(2)}\r\n                    </tbody>\r\n                    <tbody>\r\n                        {this.renderSodkuRow(3)}\r\n                        {this.renderSodkuRow(4)}\r\n                        {this.renderSodkuRow(5)}\r\n                    </tbody>\r\n                    <tbody>\r\n                        {this.renderSodkuRow(6)}\r\n                        {this.renderSodkuRow(7)}\r\n                        {this.renderSodkuRow(8)}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                    squares: puzzle\r\n            }],\r\n            stepNumber: 0,\r\n        };\r\n    }\r\n    handleChange(event) {\r\n        const eventID = event.target.id;\r\n        const eventVal = event.target.value;\r\n        //fix 1: Abort Change event if invalid charcter is enterd. Invalid charcters are turned to \"\" as a result of singleDigitsOnly(id);\r\n        if(eventVal === \"\") return;\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length -1];\r\n        const squares = current.squares.slice();\r\n        if(calculateWinner(squares)){\r\n            return;\r\n        }\r\n        \r\n        squares[eventID] = parseInt(eventVal);\r\n        this.setState({\r\n            history: history.concat([\r\n                {squares: squares}\r\n            ]),\r\n            stepNumber: history.length\r\n        });\r\n    }\r\n    jumpTo(step) {\r\n        var history = this.state.history;\r\n        var move = history[step].squares;\r\n        for(var i=0; i < 81; i++){\r\n            var sq = document.getElementById(i);\r\n            sq.value=move[i];\r\n        }\r\n        this.setState({\r\n            stepNumber: step\r\n        })\r\n    }\r\n    CheatButton(){\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length -1];\r\n        const squares = current.squares.slice();\r\n        for(var i=1; i < 81; i++){\r\n            var sq= document.getElementById(i);\r\n            if (i === exception){\r\n                console.log(\"Exception Reached\");\r\n                squares[i] = puzzle[i];\r\n                sq.value=puzzle[i];\r\n            }else {\r\n                squares[i] = solution[i];\r\n                sq.value=solution[i];\r\n            }\r\n        }\r\n        this.setState({\r\n            history: history.concat([\r\n                {squares: squares}\r\n            ]),\r\n            stepNumber: history.length\r\n        });\r\n    }\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            var desc = move ? \r\n                //Fix 2: showing current move;\r\n                ((move === history.length-1) ?\r\n                'Go to move #' + move + ' (current)' : 'Go to move #' + move ) :\r\n                'Go to game start';\r\n            return (\r\n                <li key ={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = \"Completed!\";\r\n        } else{\r\n            status = \"Not complete...\";\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onChange={ (e) => this.handleChange(e)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <button onClick={() => this.CheatButton()}>Complete most of puzzle</button>\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\nfunction findException(){\r\n    var j;\r\n    for (j = 0; j < solution.length; j++){\r\n        if (puzzle[j] !== solution[j]){\r\n            break;\r\n        }\r\n    }\r\n    return j;\r\n}\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction ArrayEquals(arr1,arr2){\r\n    if(arr1.length !== arr2.length) return false;\r\n    for(var i =0; i < arr1.length; i++){\r\n        if(arr1[i] !== arr2[i]) return false;\r\n    }\r\n    return true;\r\n}\r\nfunction calculateWinner(squares) {\r\n    if(ArrayEquals(squares,solution)){\r\n        var gameboard = document.getElementsByClassName(\"game-board\");\r\n        gameboard[0].setAttribute(\"id\", \"complete\");\r\n        console.log(\"Game Completed\");\r\n        return true;\r\n    } else{\r\n        var board = document.getElementById(\"complete\");\r\n        if(board!==null){\r\n            board.id=\"incomplete\";\r\n        }\r\n        console.log(\"Game not Complete\");\r\n        return null;\r\n    }\r\n}"],"sourceRoot":""}